<?php

class ExamDao {
    private $conn;

    /**
     * constructor of dao class
     */
    public function __construct(){
        try {
          /** TODO
           * List parameters such as servername, username, password, schema. Make sure to use appropriate port
           */
          $host='localhost';
          $dbname='webfinal';
          $port=3306;
          $username='root';
          $password='';

          /** TODO
           * Create new connection
           */
          $this->conn=new PDO("mysql:host=$host;port=$port;dbname=$dbname",$username,$password);
          echo "Connected successfully";
        } catch(PDOException $e) {
          echo "Connection failed: " . $e->getMessage();
        }
    }

    /** TODO
     * Implement DAO method used to get customer information
     */
    public function get_customers(){
      $stmt=$this->conn->prepare("SELECT * FROM customers");
      $stmt->execute();
      return $stmt->fetchAll();

    }

    /** TODO
     * Implement DAO method used to get customer meals
     */
    public function get_customer_meals($customer_id) {
      $stmt=$this->conn->prepare("SELECT f.name AS food_name, f.brand AS food_brand, m.created_at AS meal.date
                                FROM foods AS f
                                JOIN meals AS m ON f.id=m.food_id
                                WHERE m.customer_id=:customer_id");
      $stmt->bindParam(':customer_id', $customer_id);
      $stmt->execute();
      return $stmt->fetchAll();
    }

    /** TODO
     * Implement DAO method used to save customer data
     */
    public function add_customer($data){
      $stmt=$this->conn->prepare("INSERT INTO customers(first_name, last_name, birth_date, status) VALUES (:first_name, :last_name, :birth_date, :status)");
      $stmt->bindParam(':first_name', $data['first_name']);
      $stmt->bindParam(':last_name', $data['last_name']);
      $stmt->bindParam(':birth_date', $data['birth_date']);
      $stmt->bindParam(':status', $data['status']);
      return $stmt->execute();

    }

    /** TODO
     * Implement DAO method used to get foods report
     */
    public function get_foods_report() {
        $stmt = $this->conn->prepare(
          "SELECT
            f.name,
            f.image_url,
            f.brand,
            SUM(CASE WHEN n.name = 'Energy' THEN fn.quantity ELSE 0 END) AS energy,
            SUM(CASE WHEN n.name = 'Protein' THEN fn.quantity ELSE 0 END) AS protein,
            SUM(CASE WHEN n.name = 'Fat' THEN fn.quantity ELSE 0 END) AS fat,
            SUM(CASE WHEN n.name = 'Fiber' THEN fn.quantity ELSE 0 END) AS fiber,
            SUM(CASE WHEN n.name = 'Carbs' THEN fn.quantity ELSE 0 END) AS carbs
          FROM
            foods AS f
          LEFT JOIN
            food_nutrients AS fn ON f.id = fn.food_id
          LEFT JOIN
            nutrients AS n ON fn.nutrient_id = n.id
          GROUP BY
            f.name, f.image_url, f.brand"
        );
        $stmt->execute();
        return $stmt->fetchAll();
    }

  }
?>


-----------------------------------------------------------------------
<?php
require_once __DIR__."/../dao/ExamDao.php";

class ExamService {
    protected $dao;

    public function __construct(){
        $this->dao = new ExamDao();
    }

    /** TODO
    * Implement service method to get all customers
    */
    public function get_customers(){
        return $this->dao->get_customers();
    }

    /** TODO
    * Implement service method to get all customer meals
    */
    public function get_customer_meals($customer_id){
        return $this->dao->get_customer_meals($customer_id);
    }

    /** TODO
    * Implement service method to add customer to the database
    */
    public function add_customer($customer){
        return $this->dao->add_customer($customer);

    }


    /** TODO
    * Implement service method to return detailed list of foods
    * and total of nutrients for each food
    */
    public function foods_report(){
        return $this->dao->get_foods_report();
    }

    
}
?>
-----------------------------------------------------------------
<?php

Flight::route('GET /connection-check', function(){
    /** TODO
    * This endpoint prints the message from constructor within ExamDao class
    * Goal is to check whether connection is successfully established or not
    * This endpoint does not have to return output in JSON format
    * 5 points
    */
    new ExamDao();
});

Flight::route('GET /customers', function(){
    /** TODO
    * This endpoint returns list of all customers that will be used
    * to populate the <select> list
    * This endpoint should return output in JSON format
    * 10 points
    */
    Flight::json(Flight::examService()->get_customers());
});

Flight::route('GET /customer/meals/@customer_id', function($customer_id){
    /** TODO
    * This endpoint returns array of all meals for a specific customer
    * Every item in the array should have following properties
    *   `food_name` -> name of the food that customer eat for the meal
    *   `food_brand` -> brand of the food that customer eat for the meal
    *   `meal_date` -> date when the customer eat the meal
    * This endpoint should return output in JSON format
    * 10 points
    */
    Flight::json(Flight::examService()->get_customer_meals($customer_id));
});

Flight::route('POST /customers/add', function() {
    /** TODO
    * This endpoint should add the customer to the database
    * The data that will come from the form (if you don't change
    * the template form) has following properties
    *   `first_name` -> first name of the customer
    *   `last_name` -> last name of the customer
    *   `birth_date` -> date when the customer has been born
    * This endpoint should return the added customer in JSON format
    * 10 points
    */
    $data=Flight::request()->getData();
    Flight::json(Flight::examService()-> add_customer($data));
});

Flight::route('GET /foods/report', function(){
    /** TODO
    * This endpoint should return the array of all foods from the database
    * together with the image of the foods. This endpoint should be fully
    * paginated. Every food returned should have following properties:
    *   `name` -> name of the food
    *   `brand` -> brand of the food
    *   `image` -> <img> of the food
    *   `energy` -> total amount of calories (energy) of the food
    *   `protein` -> total amount of proteins of the food
    *   `fat` -> total amount of fat of the food
    *   `fiber` -> total amount of fiber of the food
    *   `carbs` -> total amount of carbs of the food
    * This endpoint should return output in JSON format
    * 15 points
    */
    Flight::json(Flight::examService()->foods_report());
});


?>
